{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ba",
				"back"
			],
			[
				"sp",
				"sprite"
			],
			[
				"obje",
				"objects\tstatement"
			],
			[
				"upda",
				"update_function"
			],
			[
				"is",
				"is_animation_over"
			],
			[
				"spt",
				"sprite"
			],
			[
				"s",
				"sprite"
			],
			[
				"fix_",
				"fix_vpos\tfunction"
			],
			[
				"se",
				"self\tparam"
			],
			[
				"ini",
				"init_walk\tfunction"
			],
			[
				"upa",
				"update_function"
			],
			[
				"i",
				"is_dead"
			],
			[
				"a",
				"accel_y"
			],
			[
				"bx",
				"bx0"
			],
			[
				"b",
				"bboxes_table"
			],
			[
				"T",
				"True"
			],
			[
				"Tr",
				"True"
			],
			[
				"F",
				"False\tinstance"
			],
			[
				"p",
				"punk_data"
			],
			[
				"in",
				"index\tfunction"
			],
			[
				"all_",
				"all_objects\tstatement"
			],
			[
				"set",
				"set_animation\tfunction"
			],
			[
				"ani",
				"animation_id"
			],
			[
				"n",
				"needs_refresh_patterns"
			],
			[
				"BUTT",
				"BUTTON_B\tstatement"
			],
			[
				"jo",
				"joy_pressed"
			],
			[
				"CR",
				"CROUCH_FIRE_3"
			],
			[
				"CRO",
				"CROUCH_FIRE_2"
			],
			[
				"CROUCH",
				"CROUCH_FIRE_1"
			],
			[
				"init_",
				"init_crouch\tfunction"
			],
			[
				"BUTTON",
				"BUTTON_DOWN"
			],
			[
				"fo",
				"forward\tstatement"
			],
			[
				"anima",
				"animation_tick"
			],
			[
				"similar_",
				"similar_from_top"
			],
			[
				"get_s",
				"get_surrounding_band"
			],
			[
				"su",
				"surfarray"
			],
			[
				"tspr",
				"tsprites"
			],
			[
				"lo",
				"load"
			],
			[
				"N",
				"None"
			],
			[
				"0xFF",
				"0xFF000000"
			],
			[
				"S",
				"Surface"
			],
			[
				"pixe",
				"pixels2d"
			],
			[
				"pi",
				"pixels2d"
			],
			[
				"surf",
				"surfarray"
			],
			[
				"sub",
				"subsurface"
			],
			[
				"iter",
				"itertools\tmodule"
			],
			[
				"get",
				"get_first\tfunction"
			],
			[
				"fra",
				"frames"
			],
			[
				"j",
				"joy\tstatement"
			],
			[
				"spr",
				"sprite\tparam"
			],
			[
				"flip",
				"flip_controls\tfunction"
			],
			[
				"spe",
				"speed_x"
			],
			[
				"fix",
				"fix_vpos\tfunction"
			],
			[
				"col",
				"collides_background\tfunction"
			],
			[
				"f",
				"forward"
			],
			[
				"sel",
				"self"
			],
			[
				"spee",
				"speed_y"
			],
			[
				"non",
				"None\tinstance"
			],
			[
				"update_",
				"update_function"
			],
			[
				"set_",
				"set_physics"
			],
			[
				"coll",
				"collides_background\tfunction"
			],
			[
				"up",
				"update_function"
			],
			[
				"lay",
				"layer_B\tstatement"
			],
			[
				"l",
				"layer_A"
			],
			[
				"c",
				"camera_x\tstatement"
			],
			[
				"pl",
				"plane_B_offset\tstatement"
			],
			[
				"u",
				"update_object"
			],
			[
				"name_",
				"name_ids"
			],
			[
				"po",
				"poi_Af"
			],
			[
				"musashi",
				"musashi_states"
			],
			[
				"allo",
				"allocate_sprite\tfunction"
			],
			[
				"sta",
				"stand"
			],
			[
				"collisio",
				"collision_map"
			],
			[
				"all",
				"all_objects"
			],
			[
				"frmae",
				"frame_id\tstatement"
			],
			[
				"0x",
				"0x800"
			],
			[
				"t",
				"t_id"
			],
			[
				"is_",
				"is_flipped\tstatement"
			],
			[
				"musashi_",
				"musashi_sprite\tstatement"
			],
			[
				"animatio",
				"animations_table"
			],
			[
				"sprite_",
				"sprite_list_size\tstatement"
			],
			[
				"sprite_lis",
				"sprite_list_size"
			],
			[
				"gl",
				"globals\tmodule"
			]
		]
	},
	"buffers":
	[
		{
			"file": "run_stage.py",
			"settings":
			{
				"buffer_size": 1763,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "from tilemap import layer_A\nfrom queue import Queue\nfrom tsprite import *\n\nINACTIVE = 0\nACTIVE = 1\n\nimpulsions_table = [-5.5, -6.5, -7.5, -8.5, -9.5, -10.5, -11.5, -12.5]\n\n\nclass Object():\n    def __init__(self):\n        self.id_ = 0\n        self.status = INACTIVE\n\n        self.x = 0.0\n        self.y = 0.0\n        self.speed_x = 0.0\n        self.speed_y = 0.0\n        self.max_speed_x = 0.0\n        self.max_speed_y = 0.0\n        self.accel_x = 0.0\n        self.accel_y = 0.0\n\n        self.sprite = None\n\n        self.bbox = None\n\n        self.hx0 = 0\n        self.hy0 = 0\n        self.hx1 = 0\n        self.hy1 = 0\n\n        self.back = 0\n        self.front = 0\n\n        self.is_flipped = False\n        self.collision_flag = False\n        self.is_collidable = False\n        self.is_hittable = False\n        self.is_dead = False\n        self.is_collided = False\n        self.is_hit = False\n        self.has_hit = False\n        self.collided_object = None\n        self.hit_object = None\n        self.hitting_object = None\n\n        self.param1 = 0\n        self.param2 = 0\n        self.param3 = 0\n        self.param4 = 0\n        self.ptr1 = None\n        self.ptr2 = None\n\n        self.update_function = None\n        self.collision_function = None\n\n\nobjects_size = 32\nobjects = [Object() for _ in range(objects_size)]\n\nall_objects = Queue()\nfriends_objects = Queue()\nennemy_objects = Queue()\n\n\ndef allocate_object():\n    for i, o in enumerate(objects):\n        if o.status == INACTIVE:\n            print 'allocating object #%d' % i\n            break\n    else:\n        return None\n\n    all_objects.add(o)\n    return o\n\n\ndef release_object(obj):\n    if obj.sprite:\n        disable_sprite(obj.sprite)\n        obj.sprite = None\n\n    obj.id_ = 0\n    obj.status = INACTIVE\n    obj.update_function = None\n\n    print 'releasing object #%d' % all_objects.index(obj)\n    all_objects.remove(obj)\n\n\ndef set_physics(self, sx, ax, sy, ay):\n    if self.is_flipped:\n        self.speed_x = -sx\n        self.accel_x = -ax\n    else:\n        self.speed_x = sx\n        self.accel_x = ax\n    self.speed_y = sy\n    self.accel_y = ay\n\n\ndef signate(self, value):\n    if self.is_flipped:\n        return -value\n    else:\n        return value\n\n\ndef flip_controls():\n    Globs.forward, Globs.backward = Globs.backward, Globs.forward\n\n\ndef flip(self):\n    # self.back, self.front = self.front, self.back\n    self.is_flipped = not self.is_flipped\n\n\ndef collides_background(self, dx, dy):\n    x = int(self.x + signate(self, dx)) / 16\n    y = int(self.y + dy) / 16\n    res = Globs.collision_map[y * layer_A.twidth + x]\n    # print 'collides_background at pos (%d + %d, %d + %d) on tile (%d, %d) pos = %d -> %d (%d/%d)' % (self.x, signate(self, dx), self.y, dy, x, y, y * layer_A.twidth + x, res, res & 7, self.floor)\n    return res & 7 == self.floor\n\n\ndef get_hijump_impulsion(self):\n    x = int(self.x) / 16\n    y = int(self.y + 1) / 16\n    # print 'collides_background at pos (%d + %d, %d + %d) on tile (%d, %d) pos = %d' % (self.x, dx, self.y, dy, x, y, y * layer_A.twidth + x)\n    return impulsions_table[(Globs.collision_map[y * layer_A.twidth + x] >> 3) & 7]\n\n\ndef fix_pos(x, dx):\n    if dx > 0:\n        return ((int(x) + dx) & 0xFFF0) - dx\n    return (int(x) & 0xFFF0) + dx\n\ndef fix_hpos(self):\n    if self.is_flipped:\n        fixed = (int(self.x) & 0xFFF0) + self.front\n        print 'fix_hpos: %d -> %d' % (self.x, fixed)\n        self.x = fixed\n    else:\n        fixed = (int(self.x + self.front) & 0xFFF0) - self.front - 1\n        # print 'fix_hpos: %d -> %d' % (self.x, fixed)\n        self.x = fixed\n\n\ndef fix_vpos(self):\n    self.y = (int(self.y) & 0xFFF0) - 1\n\n\ndef update_object(self):\n    if self.update_function:\n        self.update_function(self)\n\n\ndef compute_boxes(self):\n    sprite = self.sprite\n    box = sprite.bbox\n\n    if box:\n        x_, y_, w_, h_ = box\n        bx0 = int(self.x) + x_\n        bx1 = bx0 + w_\n        by0 = int(self.y) + y_\n        by1 = by0 + h_\n        self.bbox = (bx0, bx1, by0, by1)\n    else:\n        self.bbox = None\n\n\ndef collision_between_boxes(box1, box2):\n    l1, r1, t1, b1 = box1\n    l2, r2, t2, b2 = box2\n\n    if r1 < l2:\n        return False\n    if l1 > r2:\n        return False\n    if b1 < t2:\n        return False\n    if t1 > b2:\n        return False\n\n    return True\n\n\ndef update_all_objects():\n    for obj in all_objects.data[:all_objects.cursor]:\n        if obj.status:\n            update_object(obj)\n            compute_boxes(obj)\n#        else:\n#            break\n\n\ndef update_all_sprites():\n    # print \"update_all_sprites\"\n    Globs.link = 0\n    for obj in objects:\n        sprite = obj.sprite\n        if sprite and sprite.status:\n            # print 'sprite #%d (status = %d)' % (i, sprite.status)\n            sprite.x = int(obj.x) - Globs.camera_x\n            sprite.y = int(obj.y) - Globs.camera_y\n            sprite.is_flipped = obj.is_flipped\n            sprite_update(sprite)\n\n    GP.sprite_cache[Globs.link - 1].link = 0\n",
			"file": "object.py",
			"file_size": 5169,
			"file_write_time": 131310431306009249,
			"settings":
			{
				"buffer_size": 4955,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "res/musashi_data.py",
			"settings":
			{
				"buffer_size": 32371,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "res/punk_data.py",
			"settings":
			{
				"buffer_size": 5985,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "res/states/punk_states.py",
			"settings":
			{
				"buffer_size": 3680,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "globals.py",
			"settings":
			{
				"buffer_size": 443,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "res/states/musashi_states.py",
			"settings":
			{
				"buffer_size": 10972,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "tsprite.py",
			"settings":
			{
				"buffer_size": 5614,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "tools/sprite_tools.py",
			"settings":
			{
				"buffer_size": 6926,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/My Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/User/My Python.sublime-build",
					""
				]
			],
			[
				"Packages/User/My Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "git p",
		"selected_items":
		[
			[
				"git p",
				"Git: Push"
			],
			[
				"git qui",
				"Git: Quick Commit"
			],
			[
				"git q",
				"Git: Quick Commit"
			],
			[
				" p",
				"Git: Push"
			],
			[
				"git",
				"Git: Quick Commit"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"pus",
				"Git: Push"
			],
			[
				"git c",
				"Git: Commit"
			],
			[
				"git a",
				"Git: Quick Add"
			],
			[
				"git remo",
				"Git: Add Remote"
			],
			[
				"git ini",
				"Git: Init"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"gitrem",
				"Git: Add Remote"
			],
			[
				"git: a",
				"Git: Add Remote"
			],
			[
				"git: ini",
				"Git: Init"
			],
			[
				"",
				"SublimeGit: Version"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Tryphon/Documents/workspace/ShinoPy"
	],
	"file_history":
	[
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/knife_data.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/hostage_data.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/spidey_data.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/shooter_data.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/sword_data.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/states/hostage_states.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/states/spidey_states.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/states/knife_states.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/states/sword_states.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/tools/sprite_tools.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/punk_data.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/states/punk_states.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/states/shooter_states.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/states/musashi_states.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/tsprite.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/genepy.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/run_stage.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/level_1_1.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/object.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/projectiles.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/projectile_data.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/queue.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/tilemap.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/globals.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/musashi_data.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/tools/map_tools.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/tools/sprite_tools.obsolete.py",
		"/C/Users/Tryphon/AppData/Roaming/Sublime Text 3/Packages/User/My Python.sublime-build",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/shinopy.sublime-project",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/.gitignore",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/.pydevproject",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/res/states/__init__.py",
		"/C/Users/Tryphon/Documents/workspace/ShinoPy/README.md",
		"/C/Users/Tryphon/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/C/Users/Tryphon/AppData/Roaming/Sublime Text 3/Packages/User/Python.sublime-settings",
		"/C/Users/Tryphon/Documents/workspace/GenePy/genepy.sublime-project",
		"/C/Users/Tryphon/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/C/Users/Tryphon/Documents/workspace/GenePy/dummy.py",
		"/C/Users/Tryphon/Documents/workspace/GenePy/globals.py",
		"/C/Users/Tryphon/Documents/workspace/GenePy/genesis.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"(0, 0, 0, 0)",
			"(-6, -58, 16, 59)",
			", (-1, 0)",
			"#        self.x = (int(self.x) & 0xFFF0) + 9\n",
			"_right",
			"_left",
			"\\t",
			"struct Object* ",
			"u8 ",
			"TSprite *",
			"state_function *",
			"void* ",
			"se",
			"u16 ",
			"s16 ",
			"fix32 ",
			"print",
			"indent",
			"tab",
			"path",
			"lint"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"None",
			"rect1",
			"rest1",
			"",
			"self."
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "run_stage.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1763,
						"regions":
						{
						},
						"selection":
						[
							[
								1080,
								1080
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 229.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "object.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4955,
						"regions":
						{
						},
						"selection":
						[
							[
								3349,
								3349
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1585.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "res/musashi_data.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32371,
						"regions":
						{
						},
						"selection":
						[
							[
								27303,
								27303
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11721.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "res/punk_data.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5985,
						"regions":
						{
						},
						"selection":
						[
							[
								5544,
								5544
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1772.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "res/states/punk_states.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3680,
						"regions":
						{
						},
						"selection":
						[
							[
								714,
								714
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 342.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "globals.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 443,
						"regions":
						{
						},
						"selection":
						[
							[
								441,
								441
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "res/states/musashi_states.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10972,
						"regions":
						{
						},
						"selection":
						[
							[
								924,
								924
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 359.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "tsprite.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5614,
						"regions":
						{
						},
						"selection":
						[
							[
								3567,
								3567
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1478.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "tools/sprite_tools.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6926,
						"regions":
						{
						},
						"selection":
						[
							[
								1734,
								1734
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 715.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 88.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-commit":
	{
		"height": 100.0
	},
	"output.git-init":
	{
		"height": 100.0
	},
	"output.git-pull":
	{
		"height": 100.0
	},
	"output.git-push":
	{
		"height": 100.0
	},
	"output.git-remote":
	{
		"height": 100.0
	},
	"pinned_build_system": "Anaconda Python Builder",
	"project": "shinopy.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
